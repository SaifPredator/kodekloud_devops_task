The Nautilus DevOps team is working on a Kubernetes template to deploy a web application on the cluster. 
There are some requirements to create/use persistent volumes to store the application code, and the template needs to be designed accordingly.
Please find more details below:

Note: The kubectl utility on jump_host has been configured to work with the kubernetes cluster.

1)Create a PersistentVolume named as pv-xfusion. Configure the spec as storage class should be manual, set capacity to 3Gi, set access mode to ReadWriteOnce, 
volume type should be hostPath and set path to /mnt/sysops (this directory is already created, 
you might not be able to access it directly, so you need not to worry about it).

vi pv.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-xfusion
spec:
  storageClassName: manual
  capacity:
    storage: 3Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /mnt/sysops
  persistentVolumeReclaimPolicy: Retain
  
  2)Create a PersistentVolumeClaim named as pvc-xfusion. Configure the spec as storage class should be manual, 
  request 2Gi of the storage, set access mode to ReadWriteOnce.
  
  vi pvc.yaml
  apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-xfusion
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
      
3)Create a pod named as pod-xfusion, mount the persistent volume you created with claim name pvc-xfusion at document root of the web server,
the container within the pod should be named as container-xfusion using image httpd with latest tag only (remember to mention the tag i.e httpd:latest).
      
 vi pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: pod-xfusion
  labels:
    app: xfusion
spec:
  containers:
    - name: container-xfusion
      image: httpd:latest
      volumeMounts:
        - name: xfusion-pv
          mountPath: /usr/local/apache2/htdocs
  volumes:
    - name: xfusion-pv
      persistentVolumeClaim:
        claimName: pvc-xfusion

4)Create a node port type service named web-xfusion using node port 30008 to expose the web server running within the pod.
vi svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: web-xfusion
spec:
  type: NodePort
  selector:
    app: xfusion
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80
      nodePort: 30008



