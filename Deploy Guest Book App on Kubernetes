Create a deployment named redis-master for Redis master.

a.) Replicas count should be 1.

b.) Container name should be master-redis-xfusion and it should use image redis.

c.) Request resources as CPU should be 100m and Memory should be 100Mi.

d.) Container port should be redis default port i.e 6379.
cat redis-master-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-master
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-master
  template:
    metadata:
      labels:
        app: redis-master
    spec:
      containers:
        - name: master-redis-xfusion
          image: redis
          ports:
            - containerPort: 6379
          resources:
            requests:
              cpu: "100m"
              memory: "100Mi"
kubectl apply -f redis-master-deployment.yaml
kubectl get deployments

Create a service named redis-master for Redis master. Port and targetPort should be Redis default port i.e 6379.
cat redis-master-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: redis-master
spec:
  selector:
    app: redis-master
  ports:
    - name: redis
      port: 6379
      targetPort: 6379
kubectl apply -f redis-master-service.yaml
kubectl get services
Create another deployment named redis-slave for Redis slave.

a.) Replicas count should be 2.

b.) Container name should be slave-redis-xfusion and it should use gcr.io/google_samples/gb-redisslave:v3 image.

c.) Requests resources as CPU should be 100m and Memory should be 100Mi.

d.) Define an environment variable named GET_HOSTS_FROM and its value should be dns.

e.) Container port should be Redis default port i.e 6379.
cat redis-slave-deployment.yamk
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-slave
spec:
  replicas: 2
  selector:
    matchLabels:
      app: redis-slave
  template:
    metadata:
      labels:
        app: redis-slave
    spec:
      containers:
        - name: slave-redis-xfusion
          image: gcr.io/google_samples/gb-redisslave:v3
          ports:
            - containerPort: 6379
          env:
            - name: GET_HOSTS_FROM
              value: dns
          resources:
            requests:
              cpu: "100m"
              memory: "100Mi"
kubectl apply -f redis-slave-deployment.yaml
kubectl get deployments
Create another service named redis-slave. It should use Redis default port i.e 6379.

FRONT END TIER
cat redis-slave-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: redis-slave
spec:
  selector:
    app: redis-slave
  ports:
    - name: redis
      port: 6379
      targetPort: 6379
kubectl apply -f redis-slave-service.yaml
kubectl get services
Create a deployment named frontend.

a.) Replicas count should be 3.

b.) Container name should be php-redis-xfusion and it should use gcr.io/google-samples/gb-frontend:v4 image.

c.) Request resources as CPU should be 100m and Memory should be 100Mi.

d.) Define an environment variable named as GET_HOSTS_FROM and its value should be dns.

e.) Container port should be 80.
cat frontend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: php-redis-xfusion
          image: gcr.io/google-samples/gb-frontend:v4
          ports:
            - containerPort: 80
          env:
            - name: GET_HOSTS_FROM
              value: dns
          resources:
            requests:
              cpu: "100m"
              memory: "100Mi"
kubectl apply -f frontend-deployment.yaml
kubectl get deployments
Create a service named frontend. Its type should be NodePort, port should be 80 and its nodePort should be 30009.
cat frontend-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: frontend
spec:
  type: NodePort
  ports:
    - name: http
      port: 80
      nodePort: 30009
  selector:
    app: frontend
kubectl apply -f frontend-service.yaml
kubectl get services
complete the task by clicking in top left button and put the nodeport 30009 and use the app
